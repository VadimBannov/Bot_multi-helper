import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import time
from config import *
from gpt import GPT
from database import *
import logging

# –¢–æ–∫–µ–Ω –∏ –∫–ª–∞—Å—Å GPT
bot = telebot.TeleBot(BOT_TOKEN)
gpt = GPT()

# –°–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
prepare_db()
get_all_rows(DB_TABLE_USERS_NAME)

# –í—ã–≤–µ–¥–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é Logging
logging.basicConfig(
    level=logging.DEBUG, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="log_file.txt", filemode="a",
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
def create_markup(button_labels):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for label in button_labels:
        markup.add(KeyboardButton(label))
    return markup


# debug –∏ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.message_handler(commands=['debug'])
def debug_command(message):
    with open("log_file.txt", "r", encoding="latin1") as f:
        bot.send_document(message.chat.id, f)


@bot.message_handler(commands=["history"])
@bot.message_handler(func=lambda message: "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤" in message.text)
def command_history(message):
    user_id = message.from_user.id
    history = get_data_for_user(user_id)
    if history:
        history_text = f"{history['timestamp']}:  ({history['task']})  -  ({history['answer']})"
        bot.send_message(message.chat.id, f"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n{history_text}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start"])
def start_command(message):
    user_name, user_id = message.from_user.first_name, message.from_user.id
    if is_value_in_table(DB_TABLE_USERS_NAME, "user_id", user_id):
        delete_user(user_id)
    insert_row([user_id, 'null', 'null', 'null', 'null', "null"])
    bot.send_photo(message.chat.id, LINK_IMAGE[0], f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {user_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç ZaPodezd. "
                                                   "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –≤–∞–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å "
                                                   "–ø—Ä–µ–¥–º–µ—Ç, –∏ –∑–∞—Ç–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –ò–ª–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å "
                                                   "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
                                                   "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
                   reply_markup=create_markup(["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è", "–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"]))


@bot.message_handler(func=lambda message: "–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã" in message.text)
def other_options(message):
    bot.send_message(message.chat.id, "–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                     reply_markup=create_markup(["üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "ü§ñ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]))


# –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["help"])
@bot.message_handler(func=lambda message: "üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" in message.text)
def help_command(message):
    message_text = message.text
    bot.send_message(message.chat.id,  "üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n–í–æ-–ø–µ—Ä–≤—ã—Ö, –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –µ—Å—Ç—å "
                                       "–¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞. –ü–µ—Ä–≤—ã–π - —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥, "
                                       "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±, –Ω–æ –Ω–µ—É–¥–æ–±–Ω—ã–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–∫–æ–≤–æ–π "
                                       "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, –≤ "
                                       "–º–µ–Ω—é. –ò –≤—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫. –ö "
                                       "–Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏, "
                                       "–Ω—É–∂–Ω–æ –ª–∏—à—å –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –Ω–∏—Ö. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–¥–æ–±–µ–Ω –∏ –ø–æ–Ω—è—Ç–µ–Ω, –Ω–æ –º–µ–Ω–µ–µ "
                                       "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω. "
                                       "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å.\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è "
                                       "—Å–≤–æ–µ–≥–æ –ø—Ä–æ–º—Ç–∞ –Ω—É–∂–Ω–æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, "
                                       "–¥–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –ª–∏–±–æ –∫–æ–º–∞–Ω–¥—ã (/help_with_russian_language –∏–ª–∏ "
                                       "/help_with_maths –∏–ª–∏ /help_with_history) –∏–±–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ "
                                       "–∫–Ω–æ–ø–∫–∏\n"
                                       "‚Äî –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è ¬´–ù–æ–≤–∏—á–æ–∫¬ª –∏–ª–∏ "
                                       "¬´–ü—Ä–æ—Ñ–∏¬ª. –ö–æ–º–∞–Ω–¥—ã (/level_beginner, /level_advanced) –∏–ª–∏ –æ–ø—è—Ç—å –∂–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ "
                                       "–∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å ¬´–ù–æ–≤–∏—á–æ–∫¬ª, –±–æ—Ç –±—É–¥–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ "
                                       "—Ç–µ—Ä–º–∏–Ω–∞–º–∏. –ê –µ—Å–ª–∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å ¬´–ü—Ä–æ—Ñ–∏¬ª, —É–∂–µ –æ—á–µ–≤–∏–¥–Ω–æ, –æ–±—ä—è—Å–Ω—è—Ç—å –±—É–¥–µ—Ç "
                                       "–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏.\n\n–ö–æ–≥–¥–∞ –≤—ã –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∏, –º–æ–∂–Ω–æ "
                                       "–≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "
                                       "/solve_task - –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–æ–º—Ç, —Ç–æ –µ—Å—Ç—å, –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ—Å–ª–µ "
                                       "—Ç–æ–≥–æ –∫–∞–∫ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. "
                                       "–ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –≤–∞—à –æ—Ç–≤–µ—Ç\n‚Äî –ö–æ–º–∞–Ω–¥–∞ "
                                       "/continue_explaining –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª - –Ω—É–∂–Ω–∞ –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ "
                                       "–±–æ—Ç –Ω–µ –¥–æ–ø–∏—Å–∞–ª –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ –∫–æ–Ω—Ü–∞, "
                                       "—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.\n‚Äî –ö–æ–º–∞–Ω–¥–∞ /end_dialog –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "
                                       "¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –∏ –æ–Ω –∑–∞–±—ã–≤–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ "
                                       "—Å–æ–æ–±—â–µ–Ω–∏—è.\n‚Äî –ö–æ–º–∞–Ω–¥–∞ /request_history –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–ò—Å—Ç–æ—Ä–∏—è¬ª - "
                                       "–≤—ã–≤–æ–¥–∏—Ç –≤–∞—à–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.",
                     reply_markup=create_markup(["üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "ü§ñ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]))
    if message_text == "/help":
        bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã", reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=["about"])
@bot.message_handler(func=lambda message: "ü§ñ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞" in message.text)
def about_command(message):
    message_text = message.text
    bot.send_message(message.chat.id, "ü§ñ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:\n\n–≠—Ç–æ—Ç –±–æ—Ç –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç—Ä–µ–º "
                                      "–ø—Ä–µ–¥–º–µ—Ç–∞–º: —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É, –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ "
                                      "—è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö "
                                      "–æ—Ç–≤–µ—Ç–æ–≤.",
                     reply_markup=create_markup(["üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "ü§ñ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]))
    if message_text == "/about":
        bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã", reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=["level_beginner", "level_advanced"])
def command_level(mesaage):
    processing_selected_level(mesaage)


@bot.message_handler(commands=["solve_task"])
def solve_task_command(message):
    correct_or_change(message)


@bot.message_handler(commands=['continue_explaining'])
@bot.message_handler(func=lambda message: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" in message.text)
def continue_commands(message):
    if (is_value_in_table(DB_TABLE_USERS_NAME, "subject", "null")
            or is_value_in_table(DB_TABLE_USERS_NAME, "level", "null")
            or is_value_in_table(DB_TABLE_USERS_NAME, "task", "null")):
        if is_value_in_table(DB_TABLE_USERS_NAME, "subject", "null"):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ",
                             reply_markup=create_markup(["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"]))
            bot.register_next_step_handler(message, processing_selected_subject)
            return
        elif is_value_in_table(DB_TABLE_USERS_NAME, "level", "null"):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: ",
                             reply_markup=create_markup(["–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ—Ñ–∏"]))
            bot.register_next_step_handler(message, processing_selected_level)
            return
        else:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç: ")
            bot.register_next_step_handler(message, solve_task_command)
            return
    bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ —á—É—Ç–∫–∞", reply_markup=ReplyKeyboardRemove())
    get_promt(message)
    return


@bot.message_handler(commands=['end_dialog'])
@bot.message_handler(func=lambda message: "–ó–∞–≤–µ—Ä—à–∏—Ç—å" in message.text)
def end_task_commands(message):
    if (is_value_in_table(DB_TABLE_USERS_NAME, "subject", "null")
            or is_value_in_table(DB_TABLE_USERS_NAME, "level", "null")
            or is_value_in_table(DB_TABLE_USERS_NAME, "task", "null")):
        if is_value_in_table(DB_TABLE_USERS_NAME, "subject", "null"):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ",
                             reply_markup=create_markup(["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"]))
            bot.register_next_step_handler(message, processing_selected_subject)
            return
        elif is_value_in_table(DB_TABLE_USERS_NAME, "level", "null"):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: ",
                             reply_markup=create_markup(["–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ—Ñ–∏"]))
            bot.register_next_step_handler(message, processing_selected_level)
            return
        else:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç: ")
            bot.register_next_step_handler(message, solve_task_command)
            return
    time.sleep(2)
    bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∏–π —Ä–∞—Å—Å–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑: ",
                     reply_markup=ReplyKeyboardRemove())
    start_command(message)
    return


@bot.message_handler(commands=["help_with_russian_language", "help_with_maths", "help_with_history"])
@bot.message_handler()
def processing_selected_subject(message):
    message_text, user_id = message.text, message.from_user.id
    if message_text == "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫" or message_text == "/help_with_russian_language":
        update_row_value(user_id, "subject", "Russian language")
    elif message_text == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" or message_text == "/help_with_maths":
        update_row_value(user_id, "subject", "maths")
    elif message_text == "–ò—Å—Ç–æ—Ä–∏—è" or message_text == "/help_with_history":
        update_row_value(user_id, "subject", "history")
    elif message_text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        start_command(message)
        return
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É!")
        return
    bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: ",
                     reply_markup=create_markup(["–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ—Ñ–∏"]))
    bot.register_next_step_handler(message, processing_selected_level)


def processing_selected_level(message):
    message_text, user_id = message.text, message.from_user.id
    if is_value_in_table(DB_TABLE_USERS_NAME, "subject", "null"):
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ",
                         reply_markup=create_markup(["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"]))
        bot.register_next_step_handler(message, processing_selected_subject)
        return
    if message_text == "–ù–æ–≤–∏—á–æ–∫" or message_text == "/level_beginner":
        update_row_value(user_id, "level", "beginner")
    elif message_text == "–ü—Ä–æ—Ñ–∏" or message_text == "/level_advanced":
        update_row_value(user_id, "level", "advanced")
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É!")
        return
    res, second_res = get_data_for_user(user_id)['subject'], get_data_for_user(user_id)["level"]
    if res == "Russian language":
        subject = "–†—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É"
    elif res == "maths":
        subject = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
    else:
        subject = "–ò—Å—Ç–æ—Ä–∏—è"
    if second_res == "beginner":
        level = "–ù–æ–≤–∏—á–æ–∫"
    else:
        level = "–ü—Ä–æ—Ñ–∏"
    bot.send_message(message.chat.id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?\n\n"
                                      f"({subject}; {level})",
                     reply_markup=create_markup(["–í–µ—Ä–Ω–æ", "–ò–∑–º–µ–Ω–∏—Ç—å"]))
    bot.register_next_step_handler(message, correct_or_change)


def correct_or_change(message):
    message_text, user_id = message.text, message.from_user.id
    if (is_value_in_table(DB_TABLE_USERS_NAME, "subject", "null")
            or is_value_in_table(DB_TABLE_USERS_NAME, "level", "null")):
        if is_value_in_table(DB_TABLE_USERS_NAME, "subject", "null"):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ",
                             reply_markup=create_markup(["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"]))
            bot.register_next_step_handler(message, processing_selected_subject)
            return
        else:
            is_value_in_table(DB_TABLE_USERS_NAME, "level", "null")
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: ",
                             reply_markup=create_markup(["–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ—Ñ–∏"]))
            bot.register_next_step_handler(message, processing_selected_level)
            return
    if message_text == "–í–µ—Ä–Ω–æ" or message_text == "/solve_task":
        bot.send_message(message.chat.id, "–£—Ä–∞! —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç: ",
                         reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_promt)
        return
    else:
        start_command(message)
        return


def get_promt(message):
    message_text, user_id = message.text, message.from_user.id
    if message.content_type != "text":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        bot.register_next_step_handler(message, get_promt)
        return
    user_promt = message_text
    if gpt.count_tokens(user_promt) > MAX_TOKENS:
        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤\n–ò—Å–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å")
        bot.register_next_step_handler(message, get_promt)
        return
    update_row_value(user_id, "task",  user_promt)
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è",
                     reply_markup=ReplyKeyboardRemove())

    formatted_time_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
    update_row_value(user_id, "timestamp", formatted_time_str)

    res, second_res, third_res = (get_data_for_user(user_id),
                                  get_data_for_user(user_id)['subject'], get_data_for_user(user_id)['level'])
    system_prompt = PROMPTS_TEMPLATES[second_res][third_res]
    promt = gpt.make_promt(res, system_prompt)
    resp = gpt.send_request(promt)
    success, answer = gpt.process_resp(resp)
    update_row_value(user_id, "answer", answer)

    bot.send_message(message.chat.id, get_data_for_user(user_id)['answer'],
                     reply_markup=create_markup(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"]))


bot.polling()
